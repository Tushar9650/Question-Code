void markparent(unordered_map<TreeNode*,TreeNode*>& parent,TreeNode* root){ // make an map to show the parent of every node
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            
            TreeNode* node=q.front();
            q.pop();
            
            if(node->left){
                q.push(node->left);
                parent[node->left]=node;
            }
            
            if(node->right){
                q.push(node->right);
                parent[node->right]=node;
            }
        }
    }
    
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> parent;
        unordered_map<TreeNode*,bool> visited;
        queue<TreeNode*> q;
        
        q.push(target);// target nodes sey start krey gay trval krna
        visited[target]=true;
        
        markparent(parent,root);
        int level=0;
        while(!q.empty()){
            int size=q.size();   
            // TreeNode* node=q.front();
            if(level++==k)// agr ush distance prr puch gya toh break krr degay abb jo bhi elemensts queue may hai vo at k distance prr hai
                break;
            for(int i=0;i<size;i++){
                TreeNode* temp=q.front();q.pop();
                
                if(temp->left!=NULL && !visited[temp->left]){
                    q.push(temp->left);
                    visited[temp->left]=true;                                     //        parent
                                                                                  //           |     
                }                                                                 //          / \
                                                                             // left side          right side
                if(temp->right && !visited[temp->right]){                                      
                    q.push(temp->right);                                                      
                    visited[temp->right]=true;
                    
                }
                
                if(parent[temp] && !visited[parent[temp]]){    
                    q.push(parent[temp]);
                    visited[parent[temp]]=true;
                }
            }
        }
        
        vector<int> result;
        while(!q.empty()){
            TreeNode* node=q.front();q.pop();
            result.push_back(node->val);
                
        }
        return result;
    }
